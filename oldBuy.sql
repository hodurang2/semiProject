-- 시퀀스 삭제
DROP SEQUENCE USER_SEQ;
DROP SEQUENCE PRODUCT_SEQ;
DROP SEQUENCE PRODUCT_IMAGE_SEQ;
DROP SEQUENCE WISHLIST_SEQ;
DROP SEQUENCE ALARM_SEQ;
DROP SEQUENCE REVIEW_SEQ;
DROP SEQUENCE INACTIVE_USER_SEQ;
DROP SEQUENCE CATEGORY_SEQ;
DROP SEQUENCE INQUIRY_SEQ;
DROP SEQUENCE NOTICE_SEQ;
DROP SEQUENCE PRODUCT_COMMENT_SEQ;
DROP SEQUENCE ASK_SEQ;


-- 시퀀스 생성
CREATE SEQUENCE USER_SEQ NOCACHE;
CREATE SEQUENCE PRODUCT_SEQ NOCACHE;
CREATE SEQUENCE PRODUCT_IMAGE_SEQ NOCACHE;
CREATE SEQUENCE WISHLIST_SEQ NOCACHE;
CREATE SEQUENCE ALARM_SEQ NOCACHE;
CREATE SEQUENCE REVIEW_SEQ NOCACHE;
CREATE SEQUENCE INACTIVE_USER_SEQ NOCACHE;
CREATE SEQUENCE CATEGORY_SEQ NOCACHE;
CREATE SEQUENCE INQUIRY_SEQ NOCACHE;
CREATE SEQUENCE NOTICE_SEQ NOCACHE;
CREATE SEQUENCE PRODUCT_COMMENT_SEQ NOCACHE;
CREATE SEQUENCE ASK_SEQ NOCACHE;



-- 테이블 삭제
DROP TABLE ASK;
DROP TABLE PRODUCT_COMMENT;
DROP TABLE NOTICE;
DROP TABLE INQUIRY;
DROP TABLE LEAVE_USER;
DROP TABLE INACTIVE_USER;
DROP TABLE REVIEW;
DROP TABLE ALARM;
DROP TABLE WISHLIST;
DROP TABLE PRODUCT_IMAGE;
DROP TABLE PRODUCT;
DROP TABLE CATEGORY;
DROP TABLE USER_T;

-- 사용자 테이블
CREATE TABLE USER_T (
    USER_NO         NUMBER                  NOT NULL        ,
    EMAIL           VARCHAR2(100 BYTE)      NOT NULL UNIQUE ,
    NAME            VARCHAR2(50 BYTE)       NULL            ,
    PW              VARCHAR2(64 BYTE)       NULL            ,   -- 비밀번호 SHA-256 암호화 방식 사용
    GENDER          VARCHAR2(2 BYTE)        NULL            ,
    PHONE           VARCHAR2(15 BYTE)       NULL            ,   -- 휴대폰 번호 하이픈('-') 제거 후 저장
    AGREE           NUMBER                  NULL            ,   -- 서비스동의여부 0:필수, 1:이벤트
    STATE           NUMBER                  NULL            ,   -- 가입형태 0:정상 1:네이버
    JOINED_AT       TIMESTAMP               NULL            ,
    ROLE            NUMBER   DEFAULT 1      NOT NULL        ,   -- 권한  0:관리자 1:일반회원
    POSTCODE        VARCHAR2(5 BYTE)        NOT NULL        ,
    JIBUN_ADDRESS   VARCHAR2(100 BYTE)      NULL            ,
    DETAIL_ADDRESS  VARCHAR2(100 BYTE)      NULL            ,
    ROAD_ADDRESS    VARCHAR2(100 BYTE)      NULL            ,
    CONSTRAINT PK_USER_T PRIMARY KEY (USER_NO) 
);

-- 카테고리 테이블
CREATE TABLE CATEGORY (
    CATEGORY_ID     NUMBER                  NOT NULL        ,
    NAME            VARCHAR2(500 BYTE)      NOT NULL        ,
    CONSTRAINT PK_CATEGORY PRIMARY KEY(CATEGORY_ID)
);

-- 상품 테이블
CREATE TABLE PRODUCT (
    PRODUCT_NO          NUMBER                  NOT NULL    ,
    SELLER_NO           NUMBER                  NOT NULL    ,
    BUYER_NO            NUMBER                  NULL        ,
    CATEGORY_ID         NUMBER                  NOT NULL    ,
    PRODUCT_NAME        VARCHAR2(100 BYTE)      NOT NULL    ,
    PRODUCT_PRICE       NUMBER                  NOT NULL    ,
    PRODUCT_INFO        VARCHAR2(4000 BYTE)     NULL        ,
    PRODUCT_CREATED_AT  TIMESTAMP               NULL        ,
    PRODUCT_MODIFIED_AT TIMESTAMP               NULL        ,
    PRODUCT_HIT         NUMBER   DEFAULT 0      NULL        ,
    PRODUCT_LIKE        NUMBER   DEFAULT 0      NULL        ,
    PRODUCT_STATE       NUMBER                  NULL        ,        -- 판매상태 0:판매중 1:예약중 2:판매완료
    PRODUCT_TRADE_ADDRESS   VARCHAR2(100 BYTE)  NULL        ,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_NO),
    CONSTRAINT FK_USER_TO_PRODUCT_1 FOREIGN KEY(SELLER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE,            -- 사용자 탈퇴 시, PRODUCT 삭제
    CONSTRAINT FK_USER_TO_PRODUCT_2 FOREIGN KEY(BUYER_NO) REFERENCES USER_T(USER_NO) ON DELETE SET NULL,            -- 사용자 탈퇴 시, BUYER_NO NULL 처리
    CONSTRAINT FK_CATEGORY_PRODUCT FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID) ON DELETE CASCADE      -- 카테고리 삭제 시, 상품 삭제
);

-- 상품이미지 테이블
CREATE TABLE PRODUCT_IMAGE (
    IMAGE_NO        NUMBER                  NOT NULL        ,
    PRODUCT_NO      NUMBER                  NOT NULL        ,
    IMAGE_PATH      VARCHAR2(100 BYTE)      NULL            ,
    IMAGE_NAME      VARCHAR2(100 BYTE)      NULL            ,
    HASTHUMBNAIL    NUMBER                  NULL            ,     -- 썸네일 있으면 1, 없으면 0
    CONSTRAINT PK_PRODUCT_IMAGE PRIMARY KEY(IMAGE_NO),
    CONSTRAINT FK_PRODUCT_PRODUCT_IMAGE FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO) ON DELETE CASCADE   -- 상품 삭제 시, 상품 이미지 삭제
);

-- 위시리스트 테이블
CREATE TABLE WISHLIST (
    WISH_NO          NUMBER          NOT NULL               ,
    USER_NO          NUMBER          NOT NULL               ,
    PRODUCT_NO       NUMBER          NOT NULL               ,
    CREATED_AT       TIMESTAMP       NOT NULL               ,
    CONSTRAINT PK_WISHLIST PRIMARY KEY(WISH_NO),
    CONSTRAINT FK_USER_WISHLIST FOREIGN KEY(USER_NO) REFERENCES USER_T (USER_NO) ON DELETE CASCADE,             -- 사용자 탈퇴 시, WISHLIST 삭제
    CONSTRAINT FK_PRODUCT_WISHLIST FOREIGN KEY(PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO) ON DELETE CASCADE     -- 상품 삭제 시, WISHLIST 삭제
);

-- 알림 테이블
CREATE TABLE ALARM (
    NOTICE_NO       NUMBER      NOT NULL                    ,
    USER_NO         NUMBER      NOT NULL                    ,
    NOTICE_TYPE     NUMBER      NOT NULL                    ,
    READ_OR_NOT     CHAR        NULL                        ,
    CREATED_AT      TIMESTAMP   NOT NULL                    ,
    CONSTRAINT PK_ALARM PRIMARY KEY (NOTICE_NO),
    CONSTRAINT FK_USER_ALARM FOREIGN KEY(USER_NO) REFERENCES USER_T (USER_NO) ON DELETE CASCADE     -- 사용자 탈퇴 시, ALARM 삭제
);

-- 리뷰 테이블
CREATE TABLE REVIEW (
    REVIEW_NO       NUMBER              NOT NULL            ,
    BUYER_NO        NUMBER              NOT NULL            ,
    PRODUCT_NO      NUMBER              NOT NULL            ,
    CONTENTS        VARCHAR2(500 BYTE)  NOT NULL            ,
    REVIEW_SCORE    NUMBER              NOT NULL            ,
    CREATED_AT      TIMESTAMP           NOT NULL            ,
    CONSTRAINT PK_REVIEW PRIMARY KEY(REVIEW_NO),
    CONSTRAINT FK_USER_REVIEW FOREIGN KEY(BUYER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE,                   -- 사용자 탈퇴 시, 리뷰 삭제
    CONSTRAINT FK_PRODUCT_TO_REVIEW_1 FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO) ON DELETE CASCADE     -- 상품 삭제 시, 리뷰 삭제
);

-- 휴면회원 테이블
CREATE TABLE INACTIVE_USER (
    USER_NO         NUMBER              NOT NULL            ,
    EMAIL           VARCHAR2(100 BYTE)  NOT NULL            ,
    PW              VARCHAR2(64 BYTE)   NULL                ,
    NAME            VARCHAR2(50 BYTE)   NULL                ,
    GENDER          VARCHAR2(2 BYTE)    NULL                ,
    MOBILE          VARCHAR2(15 BYTE)   NULL                ,
    POSTCODE        VARCHAR2(5 BYTE)    NULL                ,
    ROAD_ADDRESS    VARCHAR2(100 BYTE)  NULL                ,
    JIBUN_ADDRESS   VARCHAR2(100 BYTE)  NULL                ,
    DETAIL_ADDRESS  VARCHAR2(100 BYTE)  NULL                ,
    AGREE           NUMBER              NOT NULL            ,
    STATE           NUMBER              NULL                ,
    PW_MODIFIED_AT  TIMESTAMP           NULL                ,
    JOINED_AT       TIMESTAMP           NULL                ,
    INACTIVED_AT    TIMESTAMP           NULL                ,
    CONSTRAINT PK_INACTIVE_USER PRIMARY KEY(USER_NO)
);

-- 탈퇴회원 테이블
CREATE TABLE LEAVE_USER (
    EMAIL           VARCHAR2(50 BYTE)   NULL                ,
    JOINED_AT       TIMESTAMP           NULL                ,
    LEAVED_AT       TIMESTAMP           NULL
);

-- 1:1 문의 테이블
CREATE TABLE INQUIRY (
    INQUIRY_NO          NUMBER              NOT NULL        ,
    USER_NO             NUMBER              NOT NULL        ,
    INQUIRY_TITLE       VARCHAR2(100 BYTE)  NOT NULL        ,
    INQUIRY_CONTENT     VARCHAR2(4000 BYTE) NOT NULL        ,
    INQUIRY_CREATED_AT  TIMESTAMP           NULL            ,
    INQUIRY_MODIFIED_AT TIMESTAMP           NULL            ,
    CONSTRAINT PK_INQUIRY PRIMARY KEY (INQUIRY_NO),
    CONSTRAINT FK_USER_INQUIRY FOREIGN KEY (USER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE  -- 사용자 탈퇴 시, 문의글 삭제
);

-- 공지사항 테이블
CREATE TABLE NOTICE (
    NOTICE_NO           NUMBER              NOT NULL        ,
    USER_NO             NUMBER              NOT NULL        ,
    EMAIL               VARCHAR2(100 BYTE)  NULL            ,
    TITLE               VARCHAR2(1000 BYTE) NOT NULL        ,
    CONTENTS            VARCHAR2(4000 BYTE) NOT NULL        ,
    CREATED_AT          TIMESTAMP           NULL            ,
    GROUP_ORDER         NUMBER              NOT NULL        ,
    CONSTRAINT PK_NOTICE PRIMARY KEY(NOTICE_NO),
    CONSTRAINT FK_USER_TO_NOTICE_1 FOREIGN KEY (USER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE      -- 사용자(관리자) 탈퇴 시, 공지사항 삭제
);

-- 상품 댓글 테이블
CREATE TABLE PRODUCT_COMMENT (
    COMMENT_NO          NUMBER              NOT NULL        ,
    PRODUCT_NO          NUMBER              NOT NULL        ,
    USER_NO             NUMBER              NOT NULL        ,
    CONTENTS            VARCHAR2(500 BYTE)  NOT NULL        ,
    CREATED_AT          TIMESTAMP           NULL            ,
    DEPTH               NUMBER              NOT NULL        ,   -- 0:원글, 1:댓글
    GROUP_NO            NUMBER              NOT NULL        ,   -- 원글과 모든 댓글(댓글, 대댓글)은 동일한 GROUP_NO을 가져야 함
    STATUS              NUMBER              NULL            ,
    CONSTRAINT PK_PRODUCT_COMMENT PRIMARY KEY(COMMENT_NO),
    CONSTRAINT FK_PRODUCT_PRODUCT_COMMENT FOREIGN KEY(PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO) ON DELETE CASCADE,     -- 상품 삭제 시, 상품 댓글 삭제
    CONSTRAINT FK_USER_PRODUCT_COMMENT FOREIGN KEY(USER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE                -- 사용자 탈퇴 시, 상품 댓글 삭제
);

-- 1:1문의답변 테이블
CREATE TABLE ASK (
    ASK_NO          NUMBER          NOT NULL                ,
    USER_NO         NUMBER          NOT NULL                ,
    INQUIRY_NO      NUMBER          NOT NULL                ,
    CONTENTS        VARCHAR2(500)   NULL                    ,
    ASK_CREATED_AT  TIMESTAMP       NULL                    ,
    CONSTRAINT PK_ASK PRIMARY KEY(ASK_NO),
    CONSTRAINT FK_INQUIRY_ASK FOREIGN KEY(INQUIRY_NO) REFERENCES INQUIRY(INQUIRY_NO) ON DELETE CASCADE,     -- 문의 삭제 시, 문의 답변 삭제
    CONSTRAINT FK_USER_T_ASK FOREIGN KEY(USER_NO) REFERENCES USER_T(USER_NO) ON DELETE CASCADE              -- 사용자 삭제 시, 문의 답변 삭제
);


-- INSERT 쿼리 테스트

-- 관리자 INSERT 
INSERT INTO USER_T VALUES (USER_SEQ.NEXTVAL, 'master0504@naver.com', '관리자1', '1111', 'F', '010-1111-1111', 0, 0, SYSTIMESTAMP, 0, '11111', '지번주소', '상세주소', '도로주소');

---사용자 INSERT
INSERT INTO USER_T VALUES (USER_SEQ.NEXTVAL, 'admin1@naver.com', '사용자1', '1111', 'F', '010-1111-1111', 1, 1, SYSTIMESTAMP, 1, '11111', '지번주소', '상세주소', '도로주소');
INSERT INTO USER_T VALUES (USER_SEQ.NEXTVAL, 'admin2@naver.com', '사용자2', '2222', 'M', '010-1111-1111', 1, 1, SYSTIMESTAMP, 1, '11111', '지번주소', '상세주소', '도로주소');
COMMIT;

-- 카테고리
INSERT INTO CATEGORY VALUES(2211081, '의류');
INSERT INTO CATEGORY VALUES(2211082, '전자제품');
INSERT INTO CATEGORY VALUES(2211083, '음식');
COMMIT;

-- 상품
INSERT INTO PRODUCT VALUES(PRODUCT_SEQ.NEXTVAL, 2, 2, 2211081, '샤넬', 20000, '짝퉁팔아요', SYSTIMESTAMP, SYSTIMESTAMP, 0, 0, 0, '경기도오산');
COMMIT;

-- 찜 목록
INSERT INTO WISHLIST VALUES (WISHLIST_SEQ.NEXTVAL, 1, 1, SYSTIMESTAMP);
COMMIT;

-- 알림
INSERT INTO ALARM VALUES (ALARM_SEQ.NEXTVAL, 1, 1, 'Y', SYSTIMESTAMP);
COMMIT;

-- 리뷰 
INSERT INTO REVIEW VALUES(REVIEW_SEQ.NEXTVAL, 2, 1, '최고다 샤넬 짝퉁!', 5, SYSTIMESTAMP);
COMMIT;

-- 휴면 회원
INSERT INTO INACTIVE_USER VALUES (INACTIVE_USER_SEQ.NEXTVAL, 'goo2jo@naver.com', '1111', '구디2조', 'F', '010-1111-2222', '11411', '가산로', '가산동131-1', 'KM타워 G호', 1, 1, SYSTIMESTAMP, SYSTIMESTAMP, SYSTIMESTAMP);
COMMIT;

-- 탈퇴한 회원
INSERT INTO LEAVE_USER VALUES('admin0504@naver.com', SYSTIMESTAMP, SYSTIMESTAMP);
COMMIT;

-- 1:1 문의
INSERT INTO INQUIRY VALUES(INQUIRY_SEQ.NEXTVAL, '2', '야 담당자나와', '일을이따구로', SYSTIMESTAMP, SYSTIMESTAMP);
INSERT INTO INQUIRY VALUES(INQUIRY_SEQ.NEXTVAL, '3', '쇼핑문의', '쇼핑구매불가합니다.', SYSTIMESTAMP, SYSTIMESTAMP);
COMMIT;

-- 공지사항
INSERT INTO NOTICE VALUES(NOTICE_SEQ.NEXTVAL, '1', 'master0504@naver.com', '공지사항입니다.', '공지사항1번', SYSTIMESTAMP, 1);
INSERT INTO NOTICE VALUES(NOTICE_SEQ.NEXTVAL, '1', 'master0504@naver.com', '구매공지입니다.', '구매', SYSTIMESTAMP, 2);
COMMIT;

-- 상품댓글
INSERT INTO NOTICE VALUES (NOTICE_SEQ.NEXTVAL, 1, 1, '내용입니다3', SYSTIMESTAMP, 1);

-- 1:1 문의 답변
INSERT INTO ASK VALUES (ASK_SEQ.NEXTVAL, 1, 1, '내용입니다4', SYSTIMESTAMP);